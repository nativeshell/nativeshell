/* automatically generated by rust-bindgen 0.69.4 */

#![allow(non_upper_case_globals, non_camel_case_types)]

type IDXGIAdapter = std::ffi::c_void;

pub type wchar_t = ::std::os::raw::c_ushort;
pub type UINT = ::std::os::raw::c_uint;
pub type UINT_PTR = ::std::os::raw::c_ulonglong;
pub type LONG_PTR = ::std::os::raw::c_longlong;
pub type WPARAM = UINT_PTR;
pub type LPARAM = LONG_PTR;
pub type LRESULT = LONG_PTR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HWND__ {
    pub unused: ::std::os::raw::c_int,
}
pub type HWND = *mut HWND__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HMONITOR__ {
    pub unused: ::std::os::raw::c_int,
}
pub type HMONITOR = *mut HMONITOR__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlutterDesktopMessenger {
    _unused: [u8; 0],
}
pub type FlutterDesktopMessengerRef = *mut FlutterDesktopMessenger;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FlutterPlatformMessageResponseHandle {
    _unused: [u8; 0],
}
pub type FlutterDesktopMessageResponseHandle = _FlutterPlatformMessageResponseHandle;
pub type FlutterDesktopBinaryReply = ::std::option::Option<
    unsafe extern "C" fn(data: *const u8, data_size: usize, user_data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlutterDesktopMessage {
    pub struct_size: usize,
    pub channel: *const ::std::os::raw::c_char,
    pub message: *const u8,
    pub message_size: usize,
    pub response_handle: *const FlutterDesktopMessageResponseHandle,
}
pub type FlutterDesktopMessageCallback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: FlutterDesktopMessengerRef,
        arg2: *const FlutterDesktopMessage,
        arg3: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn FlutterDesktopMessengerSend(
        messenger: FlutterDesktopMessengerRef,
        channel: *const ::std::os::raw::c_char,
        message: *const u8,
        message_size: usize,
    ) -> bool;
}
extern "C" {
    pub fn FlutterDesktopMessengerSendWithReply(
        messenger: FlutterDesktopMessengerRef,
        channel: *const ::std::os::raw::c_char,
        message: *const u8,
        message_size: usize,
        reply: FlutterDesktopBinaryReply,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn FlutterDesktopMessengerSendResponse(
        messenger: FlutterDesktopMessengerRef,
        handle: *const FlutterDesktopMessageResponseHandle,
        data: *const u8,
        data_length: usize,
    );
}
extern "C" {
    pub fn FlutterDesktopMessengerSetCallback(
        messenger: FlutterDesktopMessengerRef,
        channel: *const ::std::os::raw::c_char,
        callback: FlutterDesktopMessageCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn FlutterDesktopMessengerAddRef(
        messenger: FlutterDesktopMessengerRef,
    ) -> FlutterDesktopMessengerRef;
}
extern "C" {
    pub fn FlutterDesktopMessengerRelease(messenger: FlutterDesktopMessengerRef);
}
extern "C" {
    pub fn FlutterDesktopMessengerIsAvailable(messenger: FlutterDesktopMessengerRef) -> bool;
}
extern "C" {
    pub fn FlutterDesktopMessengerLock(
        messenger: FlutterDesktopMessengerRef,
    ) -> FlutterDesktopMessengerRef;
}
extern "C" {
    pub fn FlutterDesktopMessengerUnlock(messenger: FlutterDesktopMessengerRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlutterDesktopTextureRegistrar {
    _unused: [u8; 0],
}
pub type FlutterDesktopTextureRegistrarRef = *mut FlutterDesktopTextureRegistrar;
pub const FlutterDesktopTextureType_kFlutterDesktopPixelBufferTexture: FlutterDesktopTextureType =
    0;
pub const FlutterDesktopTextureType_kFlutterDesktopGpuSurfaceTexture: FlutterDesktopTextureType = 1;
pub type FlutterDesktopTextureType = ::std::os::raw::c_int;
pub const FlutterDesktopGpuSurfaceType_kFlutterDesktopGpuSurfaceTypeNone:
    FlutterDesktopGpuSurfaceType = 0;
pub const FlutterDesktopGpuSurfaceType_kFlutterDesktopGpuSurfaceTypeDxgiSharedHandle:
    FlutterDesktopGpuSurfaceType = 1;
pub const FlutterDesktopGpuSurfaceType_kFlutterDesktopGpuSurfaceTypeD3d11Texture2D:
    FlutterDesktopGpuSurfaceType = 2;
pub type FlutterDesktopGpuSurfaceType = ::std::os::raw::c_int;
pub const FlutterDesktopPixelFormat_kFlutterDesktopPixelFormatNone: FlutterDesktopPixelFormat = 0;
pub const FlutterDesktopPixelFormat_kFlutterDesktopPixelFormatRGBA8888: FlutterDesktopPixelFormat =
    1;
pub const FlutterDesktopPixelFormat_kFlutterDesktopPixelFormatBGRA8888: FlutterDesktopPixelFormat =
    2;
pub type FlutterDesktopPixelFormat = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlutterDesktopPixelBuffer {
    pub buffer: *const u8,
    pub width: usize,
    pub height: usize,
    pub release_callback:
        ::std::option::Option<unsafe extern "C" fn(release_context: *mut ::std::os::raw::c_void)>,
    pub release_context: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlutterDesktopGpuSurfaceDescriptor {
    pub struct_size: usize,
    pub handle: *mut ::std::os::raw::c_void,
    pub width: usize,
    pub height: usize,
    pub visible_width: usize,
    pub visible_height: usize,
    pub format: FlutterDesktopPixelFormat,
    pub release_callback:
        ::std::option::Option<unsafe extern "C" fn(release_context: *mut ::std::os::raw::c_void)>,
    pub release_context: *mut ::std::os::raw::c_void,
}
pub type FlutterDesktopPixelBufferTextureCallback = ::std::option::Option<
    unsafe extern "C" fn(
        width: usize,
        height: usize,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *const FlutterDesktopPixelBuffer,
>;
pub type FlutterDesktopGpuSurfaceTextureCallback = ::std::option::Option<
    unsafe extern "C" fn(
        width: usize,
        height: usize,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *const FlutterDesktopGpuSurfaceDescriptor,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlutterDesktopPixelBufferTextureConfig {
    pub callback: FlutterDesktopPixelBufferTextureCallback,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlutterDesktopGpuSurfaceTextureConfig {
    pub struct_size: usize,
    pub type_: FlutterDesktopGpuSurfaceType,
    pub callback: FlutterDesktopGpuSurfaceTextureCallback,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FlutterDesktopTextureInfo {
    pub type_: FlutterDesktopTextureType,
    pub __bindgen_anon_1: FlutterDesktopTextureInfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union FlutterDesktopTextureInfo__bindgen_ty_1 {
    pub pixel_buffer_config: FlutterDesktopPixelBufferTextureConfig,
    pub gpu_surface_config: FlutterDesktopGpuSurfaceTextureConfig,
}
extern "C" {
    pub fn FlutterDesktopTextureRegistrarRegisterExternalTexture(
        texture_registrar: FlutterDesktopTextureRegistrarRef,
        info: *const FlutterDesktopTextureInfo,
    ) -> i64;
}
extern "C" {
    pub fn FlutterDesktopTextureRegistrarUnregisterExternalTexture(
        texture_registrar: FlutterDesktopTextureRegistrarRef,
        texture_id: i64,
        callback: ::std::option::Option<
            unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void),
        >,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn FlutterDesktopTextureRegistrarMarkExternalTextureFrameAvailable(
        texture_registrar: FlutterDesktopTextureRegistrarRef,
        texture_id: i64,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlutterDesktopPluginRegistrar {
    _unused: [u8; 0],
}
pub type FlutterDesktopPluginRegistrarRef = *mut FlutterDesktopPluginRegistrar;
pub type FlutterDesktopOnPluginRegistrarDestroyed =
    ::std::option::Option<unsafe extern "C" fn(arg1: FlutterDesktopPluginRegistrarRef)>;
extern "C" {
    pub fn FlutterDesktopPluginRegistrarGetMessenger(
        registrar: FlutterDesktopPluginRegistrarRef,
    ) -> FlutterDesktopMessengerRef;
}
extern "C" {
    pub fn FlutterDesktopRegistrarGetTextureRegistrar(
        registrar: FlutterDesktopPluginRegistrarRef,
    ) -> FlutterDesktopTextureRegistrarRef;
}
extern "C" {
    pub fn FlutterDesktopPluginRegistrarSetDestructionHandler(
        registrar: FlutterDesktopPluginRegistrarRef,
        callback: FlutterDesktopOnPluginRegistrarDestroyed,
    );
}
pub type VoidCallback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlutterDesktopViewController {
    _unused: [u8; 0],
}
pub type FlutterDesktopViewControllerRef = *mut FlutterDesktopViewController;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlutterDesktopView {
    _unused: [u8; 0],
}
pub type FlutterDesktopViewRef = *mut FlutterDesktopView;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlutterDesktopEngine {
    _unused: [u8; 0],
}
pub type FlutterDesktopEngineRef = *mut FlutterDesktopEngine;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlutterDesktopEngineProperties {
    pub assets_path: *const wchar_t,
    pub icu_data_path: *const wchar_t,
    pub aot_library_path: *const wchar_t,
    pub dart_entrypoint: *const ::std::os::raw::c_char,
    pub dart_entrypoint_argc: ::std::os::raw::c_int,
    pub dart_entrypoint_argv: *mut *const ::std::os::raw::c_char,
}
extern "C" {
    pub fn FlutterDesktopViewControllerCreate(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        engine: FlutterDesktopEngineRef,
    ) -> FlutterDesktopViewControllerRef;
}
extern "C" {
    pub fn FlutterDesktopViewControllerDestroy(controller: FlutterDesktopViewControllerRef);
}
extern "C" {
    pub fn FlutterDesktopViewControllerGetEngine(
        controller: FlutterDesktopViewControllerRef,
    ) -> FlutterDesktopEngineRef;
}
extern "C" {
    pub fn FlutterDesktopViewControllerGetView(
        controller: FlutterDesktopViewControllerRef,
    ) -> FlutterDesktopViewRef;
}
extern "C" {
    pub fn FlutterDesktopViewControllerForceRedraw(controller: FlutterDesktopViewControllerRef);
}
extern "C" {
    pub fn FlutterDesktopViewControllerHandleTopLevelWindowProc(
        controller: FlutterDesktopViewControllerRef,
        hwnd: HWND,
        message: UINT,
        wparam: WPARAM,
        lparam: LPARAM,
        result: *mut LRESULT,
    ) -> bool;
}
extern "C" {
    pub fn FlutterDesktopEngineCreate(
        engine_properties: *const FlutterDesktopEngineProperties,
    ) -> FlutterDesktopEngineRef;
}
extern "C" {
    pub fn FlutterDesktopEngineDestroy(engine: FlutterDesktopEngineRef) -> bool;
}
extern "C" {
    pub fn FlutterDesktopEngineRun(
        engine: FlutterDesktopEngineRef,
        entry_point: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn FlutterDesktopEngineProcessMessages(engine: FlutterDesktopEngineRef) -> u64;
}
extern "C" {
    pub fn FlutterDesktopEngineReloadSystemFonts(engine: FlutterDesktopEngineRef);
}
extern "C" {
    pub fn FlutterDesktopEngineGetPluginRegistrar(
        engine: FlutterDesktopEngineRef,
        plugin_name: *const ::std::os::raw::c_char,
    ) -> FlutterDesktopPluginRegistrarRef;
}
extern "C" {
    pub fn FlutterDesktopEngineGetMessenger(
        engine: FlutterDesktopEngineRef,
    ) -> FlutterDesktopMessengerRef;
}
extern "C" {
    pub fn FlutterDesktopEngineGetTextureRegistrar(
        engine: FlutterDesktopEngineRef,
    ) -> FlutterDesktopTextureRegistrarRef;
}
extern "C" {
    pub fn FlutterDesktopEngineSetNextFrameCallback(
        engine: FlutterDesktopEngineRef,
        callback: VoidCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn FlutterDesktopViewGetHWND(view: FlutterDesktopViewRef) -> HWND;
}
extern "C" {
    pub fn FlutterDesktopViewGetGraphicsAdapter(view: FlutterDesktopViewRef) -> *mut IDXGIAdapter;
}
extern "C" {
    pub fn FlutterDesktopEngineProcessExternalWindowMessage(
        engine: FlutterDesktopEngineRef,
        hwnd: HWND,
        message: UINT,
        wparam: WPARAM,
        lparam: LPARAM,
        result: *mut LRESULT,
    ) -> bool;
}
pub type FlutterDesktopWindowProcCallback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: HWND,
        arg2: UINT,
        arg3: WPARAM,
        arg4: LPARAM,
        arg5: *mut ::std::os::raw::c_void,
        result: *mut LRESULT,
    ) -> bool,
>;
extern "C" {
    pub fn FlutterDesktopPluginRegistrarGetView(
        registrar: FlutterDesktopPluginRegistrarRef,
    ) -> FlutterDesktopViewRef;
}
extern "C" {
    pub fn FlutterDesktopPluginRegistrarRegisterTopLevelWindowProcDelegate(
        registrar: FlutterDesktopPluginRegistrarRef,
        delegate: FlutterDesktopWindowProcCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn FlutterDesktopPluginRegistrarUnregisterTopLevelWindowProcDelegate(
        registrar: FlutterDesktopPluginRegistrarRef,
        delegate: FlutterDesktopWindowProcCallback,
    );
}
extern "C" {
    pub fn FlutterDesktopGetDpiForHWND(hwnd: HWND) -> UINT;
}
extern "C" {
    pub fn FlutterDesktopGetDpiForMonitor(monitor: HMONITOR) -> UINT;
}
extern "C" {
    pub fn FlutterDesktopResyncOutputStreams();
}
